{"version":3,"sources":["service/types.ts","models/todo.ts","service/api-frontend.ts","middleware/localStorage.ts","store/actions.ts","store/reducer.ts","service/index.ts","ToDoItem.tsx","ToDoPage.tsx","Guide.tsx","App.tsx","serviceWorker.ts","index.tsx","utils/axios.ts","service/api-fullstack.ts"],"names":["IAPI","TodoStatus","ApiFrontend","content","a","Promise","resolve","created_date","Date","toISOString","status","ACTIVE","id","shortid","user_id","filter","getFromLocalStorage","setToLocalStorage","todos","window","localStorage","setItem","JSON","stringify","parse","getItem","SET_TODO","CREATE_TODO","DELETE_TODO","DELETE_ALL_TODOS","TOGGLE_ALL_TODOS","UPDATE_TODO_STATUS","EDIT_TODO","FILTER_TODOS","setTodos","type","payload","initialState","reducer","state","action","newState","push","index3","findIndex","todo","todoId","console","log","index2","checked","COMPLETED","tempTodos","map","e","index1","splice","filterName","forEach","Service","process","REACT_APP_WHOAMI","require","default","ToDoItem","dispatch","useState","isEdit","setIsEdit","inputRef","useRef","itemTodo","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","isCompleted","onUpdateTodoStatus","updateTodoStatus","onDeleteTodo","deleteTodo","onUpdateTodoContent","key","value","ref","className","onDoubleClick","onChange","autoFocus","defaultValue","onKeyDown","toLocaleDateString","onClick","ToDoPage","setFilterName","useReducer","getTodos","resp","onCreateTodo","createTodo","onFilter","filterTodo","placeholder","length","index","Guide","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","ins","axios","create","baseURL","timeout","interceptors","request","use","headers","Authorization","ApiFullstack","post","data","get"],"mappings":"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","file":"static/js/main.a48820ed.chunk.js","sourcesContent":["import {Todo} from '../models/todo';\r\n\r\nexport abstract class IAPI {\r\n    abstract getTodos() : Promise<Array<Todo>>\r\n    abstract createTodo(content: string) : Promise<Todo>\r\n}","export enum TodoStatus {\r\n  ACTIVE = 'ACTIVE',\r\n  COMPLETED = 'COMPLETED'\r\n}\r\n\r\nexport interface Todo {\r\n  [key: string]: any\r\n}","import { IAPI } from \"./types\";\r\nimport { Todo, TodoStatus } from \"../models/todo\";\r\nimport shortid from \"shortid\";\r\nimport { getFromLocalStorage } from '../middleware/localStorage';\r\n\r\nclass ApiFrontend extends IAPI {\r\n    async createTodo(content: string): Promise<Todo> {\r\n        return Promise.resolve({\r\n            content: content,\r\n            created_date: new Date().toISOString(),\r\n            status: TodoStatus.ACTIVE,\r\n            id: shortid(),\r\n            user_id: \"firstUser\",\r\n            filter:true,\r\n        } as Todo);\r\n    }\r\n\r\n    async getTodos(): Promise<Todo[]> {\r\n        return getFromLocalStorage()\r\n    }\r\n}\r\n\r\nexport default new ApiFrontend();\r\n","import { Todo } from \"../models/todo\"\r\n\r\nexport const setToLocalStorage=(todos:Todo[])=>{\r\n  window.localStorage.setItem('list-todo',JSON.stringify(todos));\r\n}\r\n\r\nexport const getFromLocalStorage=()=>{\r\n  return JSON.parse(window.localStorage.getItem('list-todo')|| '[]');\r\n}","import {Todo} from \"../models/todo\";\r\n\r\nexport const SET_TODO = 'SET_TODO';\r\nexport const CREATE_TODO = 'CREATE_TODO';\r\nexport const DELETE_TODO = 'DELETE_TODO';\r\nexport const DELETE_ALL_TODOS = 'DELETE_ALL_TODOS';\r\nexport const TOGGLE_ALL_TODOS = 'TOGGLE_ALL_TODOS';\r\nexport const UPDATE_TODO_STATUS = 'UPDATE_TODO_STATUS';\r\nexport const EDIT_TODO = 'EDIT_TODO';\r\nexport const FILTER_TODOS = 'FILTER_TODOS';\r\n\r\n\r\nexport interface SetTodoAction {\r\n  type: typeof SET_TODO,\r\n  payload: Array<Todo>\r\n}\r\n\r\nexport function setTodos(todos: Array<Todo>): SetTodoAction {\r\n  return {\r\n    type: SET_TODO,\r\n    payload: todos\r\n  }\r\n}\r\n\r\n///////////\r\nexport interface CreateTodoAction {\r\n  type: typeof CREATE_TODO,\r\n  payload: Todo\r\n}\r\n\r\nexport function createTodo(newTodo: Todo): CreateTodoAction {\r\n  return {\r\n    type: CREATE_TODO,\r\n    payload: newTodo\r\n  }\r\n}\r\n\r\n//////////////\r\nexport interface UpdateTodoStatusAction {\r\n  type: typeof UPDATE_TODO_STATUS,\r\n  payload: {\r\n    todoId: string,\r\n    checked: boolean\r\n  }\r\n}\r\n\r\nexport function updateTodoStatus(todoId: string, checked: boolean): UpdateTodoStatusAction {\r\n  return {\r\n    type: UPDATE_TODO_STATUS,\r\n    payload: {\r\n      todoId,\r\n      checked\r\n    }\r\n  }\r\n}\r\n\r\n//////////////\r\nexport interface DeleteTodoAction {\r\n  type: typeof DELETE_TODO,\r\n  payload: string\r\n}\r\n\r\nexport function deleteTodo(todoId: string): DeleteTodoAction {\r\n  return {\r\n    type: DELETE_TODO,\r\n    payload: todoId\r\n  }\r\n}\r\n\r\n//////////////\r\nexport interface DeleteAllTodosAction {\r\n  type: typeof DELETE_ALL_TODOS,\r\n}\r\n\r\nexport function deleteAllTodos(): DeleteAllTodosAction {\r\n  return {\r\n    type: DELETE_ALL_TODOS,\r\n  }\r\n}\r\n\r\n///////////\r\nexport interface ToggleAllTodosAction {\r\n  type: typeof TOGGLE_ALL_TODOS,\r\n  payload: boolean\r\n}\r\n\r\nexport function toggleAllTodos(checked: boolean): ToggleAllTodosAction {\r\n  return {\r\n    type: TOGGLE_ALL_TODOS,\r\n    payload: checked\r\n  }\r\n}\r\n\r\n////////////\r\nexport interface EditTodoAction {\r\n  type: typeof EDIT_TODO,\r\n  payload: {\r\n    content:string;\r\n    todoId:string\r\n  }\r\n}\r\n\r\nexport function editTodo(todoId: string,content:string): EditTodoAction {\r\n  return {\r\n    type: EDIT_TODO,\r\n    payload: {\r\n      content,todoId\r\n    }\r\n  }\r\n}\r\n////////////\r\nexport interface FilterTodoAction {\r\n  type: typeof FILTER_TODOS,\r\n  payload: {\r\n    filterName:string\r\n  }\r\n}\r\n\r\nexport function filterTodo(filterName:string): FilterTodoAction {\r\n    return {\r\n      type: FILTER_TODOS,\r\n      payload: {\r\n        filterName\r\n      }\r\n    }\r\n}\r\n\r\nexport type AppActions =\r\n  SetTodoAction |\r\n  CreateTodoAction |\r\n  UpdateTodoStatusAction |\r\n  DeleteTodoAction |\r\n  DeleteAllTodosAction |\r\n  ToggleAllTodosAction | \r\n  EditTodoAction | \r\n  FilterTodoAction;","import { getFromLocalStorage } from './../middleware/localStorage';\r\nimport {Todo, TodoStatus} from '../models/todo';\r\nimport {\r\n  AppActions,\r\n  CREATE_TODO,\r\n  DELETE_ALL_TODOS,\r\n  DELETE_TODO,\r\n  TOGGLE_ALL_TODOS,\r\n  UPDATE_TODO_STATUS,\r\n  SET_TODO,\r\n  EDIT_TODO,\r\n  FILTER_TODOS\r\n} from './actions';\r\nimport { setToLocalStorage } from '../middleware/localStorage';\r\n\r\nexport interface AppState {\r\n  todos: Array<Todo>\r\n}\r\n\r\nexport const initialState: AppState = {\r\n  todos: []\r\n}\r\n\r\nfunction reducer(state: AppState, action: AppActions): AppState {\r\n  const newState:AppState = JSON.parse(JSON.stringify(state));\r\n  switch (action.type) {\r\n    case SET_TODO:\r\n      newState.todos = action.payload\r\n\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    case CREATE_TODO:\r\n      newState.todos.push(action.payload);\r\n\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    case EDIT_TODO:\r\n      const index3 = newState.todos.findIndex((todo) => todo.id === action.payload.todoId);\r\n      if(index3 !== -1) newState.todos[index3].content = action.payload.content\r\n\r\n      console.log(index3,newState.todos)\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    case UPDATE_TODO_STATUS:\r\n      const index2 = newState.todos.findIndex((todo) => todo.id === action.payload.todoId);\r\n      if(index2 !== -1) newState.todos[index2].status = action.payload.checked ? TodoStatus.COMPLETED : TodoStatus.ACTIVE;\r\n\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    case TOGGLE_ALL_TODOS:\r\n      const tempTodos = state.todos.map((e)=>{\r\n        return {\r\n          ...e,\r\n          status: action.payload ? TodoStatus.COMPLETED : TodoStatus.ACTIVE\r\n        }\r\n      })\r\n\r\n      return {\r\n        ...state,\r\n        todos: tempTodos\r\n      }\r\n\r\n    case DELETE_TODO:\r\n      const index1 = newState.todos.findIndex((todo) => todo.id === action.payload);\r\n      if(index1 !== -1) newState.todos.splice(index1, 1);\r\n\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    case DELETE_ALL_TODOS:\r\n      newState.todos= []\r\n\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    case FILTER_TODOS:\r\n      if(action.payload.filterName === 'ALL') {\r\n        newState.todos.forEach(todo => {\r\n          todo.filter = true\r\n        })\r\n      }\r\n      else{\r\n        newState.todos.forEach(todo => {\r\n          if(todo.status === action.payload.filterName) todo.filter = true\r\n          else todo.filter = false\r\n        })\r\n      }\r\n\r\n      setToLocalStorage(newState.todos)\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return newState;\r\n}\r\n\r\nexport default reducer;","import {IAPI} from './types';\r\n\r\nlet Service : IAPI;\r\nif (process.env.REACT_APP_WHOAMI === 'frontend') {\r\n    Service = require('./api-frontend').default as IAPI\r\n} else {\r\n    Service = require('./api-fullstack').default as IAPI\r\n}\r\n\r\nexport default Service","import React, {useEffect, useReducer, useRef, useState} from 'react';\r\n\r\nimport reducer, {initialState} from './store/reducer';\r\nimport {\r\n    setTodos,\r\n    createTodo,\r\n    toggleAllTodos,\r\n    deleteAllTodos,\r\n    updateTodoStatus,\r\n    deleteTodo,\r\n    editTodo\r\n} from './store/actions';\r\nimport {TodoStatus} from './models/todo';\r\nimport { AppActions } from './store/actions';\r\nimport {Todo} from \"./models/todo\"\r\n\r\ninterface ToDoItemProps{\r\n  todo:Todo;\r\n  dispatch: React.Dispatch<AppActions>\r\n}\r\n\r\nconst ToDoItem:React.FC<ToDoItemProps> = ({todo,dispatch}) => {\r\n    const [isEdit,setIsEdit] = useState<boolean>(false)\r\n\r\n    const inputRef = useRef<any>(null);\r\n    const itemTodo = useRef<any>(null)\r\n\r\n    useEffect(() => {\r\n        function handleClickOutside(event:any) {\r\n          if (itemTodo.current && !itemTodo.current.contains(event.target)) {\r\n            setIsEdit(false)\r\n          }\r\n        }\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n          document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n      }, [itemTodo]);\r\n\r\n    const isCompleted =()=> todo.status === 'COMPLETED'\r\n\r\n    const onUpdateTodoStatus = (e: React.ChangeEvent<HTMLInputElement>, todoId: string) => {\r\n        dispatch(updateTodoStatus(todoId, e.target.checked))\r\n    }\r\n\r\n    const onDeleteTodo = (todoId:string) => {\r\n        dispatch(deleteTodo(todoId));\r\n    }\r\n\r\n    const onEditTodo = () => {\r\n        setIsEdit(true);\r\n    }\r\n\r\n    const onUpdateTodoContent = async (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(editTodo(todo.id,inputRef.current.value))\r\n\r\n            setIsEdit(false)\r\n            inputRef.current.value = ''\r\n        }\r\n    }\r\n\r\n  return (\r\n      <>\r\n      {\r\n          todo.filter &&\r\n        <div ref={itemTodo} className={`ToDo__item ${isCompleted() && \"ToDo__item_completed\"}`} onDoubleClick={onEditTodo}>\r\n        <input\r\n            type=\"checkbox\"\r\n            checked={isCompleted()}\r\n            onChange={(e) => {\r\n                onUpdateTodoStatus(e, todo.id)\r\n            }}\r\n        />\r\n        <div className=\"column w-full top\">\r\n            {   isEdit ? \r\n                <input\r\n                    ref={inputRef}\r\n                    autoFocus \r\n                    defaultValue = {todo.content}\r\n                    className='Update_todo w-90'\r\n                    type=\"text\"\r\n                    onKeyDown={onUpdateTodoContent}\r\n                /> : \r\n            <span className={`Todo_text_content ${isCompleted() && \"text_completed\"}`}>{todo.content}</span>\r\n            }\r\n            <div className=\"row\">\r\n            <span className=\"Todo_data_created\">{new Date(todo.created_date).toLocaleDateString('en-GB')}</span>\r\n            <span>{todo.user_id}</span>\r\n            </div>\r\n        </div>\r\n        <button\r\n            className=\"Todo__delete\"\r\n            onClick={()=> onDeleteTodo(todo.id)}\r\n        >\r\n            delete\r\n        </button>\r\n    </div> \r\n      }\r\n      </>\r\n  );\r\n};\r\n\r\nexport default ToDoItem;","import React, {useEffect, useReducer, useRef, useState} from 'react';\r\n\r\nimport reducer, {initialState} from './store/reducer';\r\nimport {\r\n    setTodos,\r\n    createTodo,\r\n    toggleAllTodos,\r\n    deleteAllTodos,\r\n    updateTodoStatus,\r\n    deleteTodo,\r\n    filterTodo\r\n} from './store/actions';\r\nimport Service from './service';\r\nimport {TodoStatus} from './models/todo';\r\n\r\nimport ToDoItem from \"./ToDoItem\"\r\n\r\ntype EnhanceTodoStatus = TodoStatus | 'ALL';\r\n\r\n\r\nconst ToDoPage = () => {\r\n    const [filterName,setFilterName] = useState<string>('ALL')\r\n\r\n    const [{todos}, dispatch] = useReducer(reducer, initialState);\r\n    \r\n    const inputRef = useRef<any>(null);\r\n\r\n    useEffect(()=>{\r\n        (async ()=>{\r\n            const resp = await Service.getTodos();\r\n            dispatch(setTodos(resp || []));\r\n        })()\r\n    }, [])\r\n\r\n    const onCreateTodo = async (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter' && inputRef.current.value) {\r\n            const resp = await Service.createTodo(inputRef.current.value);\r\n            dispatch(createTodo(resp));\r\n\r\n            inputRef.current.value = ''\r\n        }\r\n    }\r\n\r\n    const onToggleAllTodo = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(toggleAllTodos(e.target.checked))\r\n    }\r\n\r\n    const onDeleteAllTodos = () => {\r\n        dispatch(deleteAllTodos());\r\n    }\r\n\r\n    const onFilter = (filterName:string) => {\r\n        dispatch(filterTodo(filterName));\r\n        setFilterName(filterName)\r\n    }\r\n\r\n    return (\r\n        <div className=\"ToDo__container\">\r\n            <div className=\"Todo__creation\">\r\n                <input\r\n                    ref={inputRef}\r\n                    className=\"Todo__input\"\r\n                    placeholder=\"What need to be done?\"\r\n                    onKeyDown={onCreateTodo}\r\n                />\r\n            </div>\r\n            <div className=\"ToDo__list\">\r\n                {todos && todos.length ? \r\n                    todos.map((todo, index) => {\r\n                        return (\r\n                                <ToDoItem dispatch={dispatch} key={index} todo={todo}/>\r\n                        );\r\n                    })\r\n                    : <div>There are currently no to-do!</div>\r\n                }\r\n            </div>\r\n            <div className=\"Todo__toolbar\">\r\n                {todos.length > 0 ?\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        onChange={onToggleAllTodo}\r\n                    /> : <div/>\r\n                }\r\n                <div className=\"Todo__tabs\">\r\n                    <button className={`btn SelectAll__btn ${filterName === 'ALL' && \"btn-active\"}`} onClick={()=>onFilter('ALL')}>\r\n                        All\r\n                    </button>\r\n                    <button className={`btn Active__btn ${filterName === TodoStatus.ACTIVE && \"btn-active\"}`} onClick={()=>onFilter(TodoStatus.ACTIVE)}>\r\n                        Active\r\n                    </button>\r\n                    <button className={`btn Completed__btn ${filterName === TodoStatus.COMPLETED && \"btn-active\"}`} onClick={()=>onFilter(TodoStatus.COMPLETED)}>\r\n                        Completed\r\n                    </button>\r\n                </div>\r\n                <button className=\"btn ClearAll__btn btn-active\" onClick={onDeleteAllTodos}>\r\n                    Clear all todos\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ToDoPage;","import React from \"react\";\n\nconst Guide=()=>{\n  return (\n    <div className=\"Guide\">\n      <span>Todo Guide!</span>\n      <div>\n        <div className=\"row mid\">\n          <div className=\"Order\"/>\n          <span>Double click (todo-item) to edit!</span>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Guide;","import React from 'react';\r\n\r\nimport ToDoPage from './ToDoPage';\r\nimport Guide from './Guide';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <main className=\"App row center mid\">\r\n      <div className='container row'>\r\n        <ToDoPage />\r\n        <Guide/>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import axios from 'axios';\r\n\r\nconst ins = axios.create({\r\n    baseURL: 'http://localhost:5050',\r\n    timeout: 10000\r\n})\r\n\r\nins.interceptors.request.use((request)=>{\r\n    request.headers.Authorization = localStorage.getItem('token')\r\n\r\n    return request\r\n})\r\n\r\nexport default ins","import {IAPI} from './types';\r\nimport {Todo} from '../models/todo';\r\nimport axios from '../utils/axios';\r\nimport {AxiosResponse} from 'axios';\r\n\r\nclass ApiFullstack extends IAPI {\r\n    async createTodo(content: string): Promise<Todo> {\r\n        const resp = await axios.post<AxiosResponse<Todo>>(`/tasks`, {\r\n            content\r\n        });\r\n\r\n        return resp.data.data;\r\n    }\r\n\r\n    async getTodos(): Promise<Array<Todo>> {\r\n        const resp = await axios.get<AxiosResponse<Array<Todo>>>(`/tasks`);\r\n\r\n        return resp.data.data;\r\n    }\r\n}\r\n\r\n\r\nexport default new ApiFullstack();"],"sourceRoot":""}